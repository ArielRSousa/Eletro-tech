// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id           Int         @id @default(autoincrement())
  nome         String
  email        String      @unique
  senha        String
  cpf          String      @unique
  telefone     String
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  enderecos    Endereco[]
  pedidos      Pedido[]
  avaliacoes   Avaliacao[]
  carrinho     Carrinho?
}

model Endereco {
  id          Int      @id @default(autoincrement())
  cliente     Cliente  @relation(fields: [clienteId], references: [id])
  clienteId   Int
  rua         String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  cep         String
  pedidos     Pedido[]
}

model Vendedor {
  id           Int       @id @default(autoincrement())
  nome         String
  email        String    @unique
  senha        String
  cnpj         String    @unique
  telefone     String
  endereco     String
  cidade       String
  estado       String
  cep          String
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  produtos     Produto[]
}

model Produto {
  id              Int      @id @default(autoincrement())
  nome            String
  preco           Float
  precoOriginal   Float?
  imagemUrl       String?
  avaliacao       Float?
  numAvaliacoes   Int?
  desconto        Int?
  descricao       String   @db.Text
  caracteristicas String[]
  especificacoes  Json?
  emEstoque       Boolean  @default(true)
  estoque         Int
  categoriaId     Int
  vendedorId      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoria Categoria @relation(fields: [categoriaId], references: [id])
  vendedor  Vendedor  @relation(fields: [vendedorId], references: [id])

  // ADICIONE ESTAS TRÊS LINHAS ABAIXO
  pedidos       PedidoProduto[] // Ligação de volta para PedidoProduto
  avaliacoes    Avaliacao[] // Ligação de volta para Avaliacao
  carrinhoItens CarrinhoItem[] // Ligação de volta para CarrinhoItem
}

model Categoria {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  produtos Produto[]
}

model Pedido {
  id           Int             @id @default(autoincrement())
  cliente      Cliente         @relation(fields: [clienteId], references: [id])
  clienteId    Int
  endereco     Endereco        @relation(fields: [enderecoId], references: [id])
  enderecoId   Int
  criadoEm     DateTime        @default(now())
  atualizadoEm DateTime        @updatedAt
  status       StatusPedido
  total        Float
  produtos     PedidoProduto[]
}

model PedidoProduto {
  id         Int     @id @default(autoincrement())
  pedido     Pedido  @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
  produto    Produto @relation(fields: [produtoId], references: [id])
  produtoId  Int
  quantidade Int
  preco      Float
}

model Avaliacao {
  id         Int      @id @default(autoincrement())
  cliente    Cliente  @relation(fields: [clienteId], references: [id])
  clienteId  Int
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  Int
  nota       Int // 1 a 5
  comentario String?
  criadoEm   DateTime @default(now())
}

model Carrinho {
  id        Int            @id @default(autoincrement())
  cliente   Cliente        @relation(fields: [clienteId], references: [id])
  clienteId Int            @unique
  itens     CarrinhoItem[]
}

model CarrinhoItem {
  id         Int      @id @default(autoincrement())
  carrinho   Carrinho @relation(fields: [carrinhoId], references: [id])
  carrinhoId Int
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  Int
  quantidade Int
}

enum StatusPedido {
  AGUARDANDO_PAGAMENTO
  PAGO
  ENVIADO
  ENTREGUE
  CANCELADO
}
